!function(e){var t={};function n(o){if(t[o])return t[o].exports;var r=t[o]={i:o,l:!1,exports:{}};return e[o].call(r.exports,r,r.exports,n),r.l=!0,r.exports}n.m=e,n.c=t,n.d=function(e,t,o){n.o(e,t)||Object.defineProperty(e,t,{enumerable:!0,get:o})},n.r=function(e){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},n.t=function(e,t){if(1&t&&(e=n(e)),8&t)return e;if(4&t&&"object"==typeof e&&e&&e.__esModule)return e;var o=Object.create(null);if(n.r(o),Object.defineProperty(o,"default",{enumerable:!0,value:e}),2&t&&"string"!=typeof e)for(var r in e)n.d(o,r,function(t){return e[t]}.bind(null,r));return o},n.n=function(e){var t=e&&e.__esModule?function(){return e.default}:function(){return e};return n.d(t,"a",t),t},n.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},n.p="",n(n.s=5)}([function(e,t,n){"use strict";class o{constructor(e){Array.isArray(e)||(e=[]),this._args=e,this.taps=[],this.interceptors=[],this.call=this._call,this.promise=this._promise,this.callAsync=this._callAsync,this._x=void 0}compile(e){throw new Error("Abstract: should be overriden")}_createCall(e){return this.compile({taps:this.taps,interceptors:this.interceptors,args:this._args,type:e})}tap(e,t){if("string"==typeof e&&(e={name:e}),"object"!=typeof e||null===e)throw new Error("Invalid arguments to tap(options: Object, fn: function)");if("string"!=typeof(e=Object.assign({type:"sync",fn:t},e)).name||""===e.name)throw new Error("Missing name for tap");e=this._runRegisterInterceptors(e),this._insert(e)}tapAsync(e,t){if("string"==typeof e&&(e={name:e}),"object"!=typeof e||null===e)throw new Error("Invalid arguments to tapAsync(options: Object, fn: function)");if("string"!=typeof(e=Object.assign({type:"async",fn:t},e)).name||""===e.name)throw new Error("Missing name for tapAsync");e=this._runRegisterInterceptors(e),this._insert(e)}tapPromise(e,t){if("string"==typeof e&&(e={name:e}),"object"!=typeof e||null===e)throw new Error("Invalid arguments to tapPromise(options: Object, fn: function)");if("string"!=typeof(e=Object.assign({type:"promise",fn:t},e)).name||""===e.name)throw new Error("Missing name for tapPromise");e=this._runRegisterInterceptors(e),this._insert(e)}_runRegisterInterceptors(e){for(const t of this.interceptors)if(t.register){const n=t.register(e);void 0!==n&&(e=n)}return e}withOptions(e){const t=t=>Object.assign({},e,"string"==typeof t?{name:t}:t);e=Object.assign({},e,this._withOptions);const n=this._withOptionsBase||this,o=Object.create(n);return o.tapAsync=((e,o)=>n.tapAsync(t(e),o)),o.tap=((e,o)=>n.tap(t(e),o)),o.tapPromise=((e,o)=>n.tapPromise(t(e),o)),o._withOptions=e,o._withOptionsBase=n,o}isUsed(){return this.taps.length>0||this.interceptors.length>0}intercept(e){if(this._resetCompilation(),this.interceptors.push(Object.assign({},e)),e.register)for(let t=0;t<this.taps.length;t++)this.taps[t]=e.register(this.taps[t])}_resetCompilation(){this.call=this._call,this.callAsync=this._callAsync,this.promise=this._promise}_insert(e){let t;this._resetCompilation(),"string"==typeof e.before?t=new Set([e.before]):Array.isArray(e.before)&&(t=new Set(e.before));let n=0;"number"==typeof e.stage&&(n=e.stage);let o=this.taps.length;for(;o>0;){o--;const e=this.taps[o];this.taps[o+1]=e;const r=e.stage||0;if(t){if(t.has(e.name)){t.delete(e.name);continue}if(t.size>0)continue}if(!(r>n)){o++;break}}this.taps[o]=e}}function r(e,t){return function(...n){return this[e]=this._createCall(t),this[e](...n)}}Object.defineProperties(o.prototype,{_call:{value:r("call","sync"),configurable:!0,writable:!0},_promise:{value:r("promise","promise"),configurable:!0,writable:!0},_callAsync:{value:r("callAsync","async"),configurable:!0,writable:!0}}),e.exports=o},function(e,t,n){"use strict";e.exports=class{constructor(e){this.config=e,this.options=void 0,this._args=void 0}create(e){let t;switch(this.init(e),this.options.type){case"sync":t=new Function(this.args(),'"use strict";\n'+this.header()+this.content({onError:e=>`throw ${e};\n`,onResult:e=>`return ${e};\n`,onDone:()=>"",rethrowIfPossible:!0}));break;case"async":t=new Function(this.args({after:"_callback"}),'"use strict";\n'+this.header()+this.content({onError:e=>`_callback(${e});\n`,onResult:e=>`_callback(null, ${e});\n`,onDone:()=>"_callback();\n"}));break;case"promise":let n="";n+='"use strict";\n',n+="return new Promise((_resolve, _reject) => {\n",n+="var _sync = true;\n",n+=this.header(),n+=this.content({onError:e=>{let t="";return t+="if(_sync)\n",t+=`_resolve(Promise.resolve().then(() => { throw ${e}; }));\n`,t+="else\n",t+=`_reject(${e});\n`},onResult:e=>`_resolve(${e});\n`,onDone:()=>"_resolve();\n"}),n+="_sync = false;\n",n+="});\n",t=new Function(this.args(),n)}return this.deinit(),t}setup(e,t){e._x=t.taps.map(e=>e.fn)}init(e){this.options=e,this._args=e.args.slice()}deinit(){this.options=void 0,this._args=void 0}header(){let e="";this.needContext()?e+="var _context = {};\n":e+="var _context;\n",e+="var _x = this._x;\n",this.options.interceptors.length>0&&(e+="var _taps = this.taps;\n",e+="var _interceptors = this.interceptors;\n");for(let t=0;t<this.options.interceptors.length;t++){const n=this.options.interceptors[t];n.call&&(e+=`${this.getInterceptor(t)}.call(${this.args({before:n.context?"_context":void 0})});\n`)}return e}needContext(){for(const e of this.options.taps)if(e.context)return!0;return!1}callTap(e,{onError:t,onResult:n,onDone:o,rethrowIfPossible:r}){let s="",i=!1;for(let t=0;t<this.options.interceptors.length;t++){const n=this.options.interceptors[t];n.tap&&(i||(s+=`var _tap${e} = ${this.getTap(e)};\n`,i=!0),s+=`${this.getInterceptor(t)}.tap(${n.context?"_context, ":""}_tap${e});\n`)}s+=`var _fn${e} = ${this.getTapFn(e)};\n`;const c=this.options.taps[e];switch(c.type){case"sync":r||(s+=`var _hasError${e} = false;\n`,s+="try {\n"),s+=n?`var _result${e} = _fn${e}(${this.args({before:c.context?"_context":void 0})});\n`:`_fn${e}(${this.args({before:c.context?"_context":void 0})});\n`,r||(s+="} catch(_err) {\n",s+=`_hasError${e} = true;\n`,s+=t("_err"),s+="}\n",s+=`if(!_hasError${e}) {\n`),n&&(s+=n(`_result${e}`)),o&&(s+=o()),r||(s+="}\n");break;case"async":let i="";i+=n?`(_err${e}, _result${e}) => {\n`:`_err${e} => {\n`,i+=`if(_err${e}) {\n`,i+=t(`_err${e}`),i+="} else {\n",n&&(i+=n(`_result${e}`)),o&&(i+=o()),i+="}\n",i+="}",s+=`_fn${e}(${this.args({before:c.context?"_context":void 0,after:i})});\n`;break;case"promise":s+=`var _hasResult${e} = false;\n`,s+=`var _promise${e} = _fn${e}(${this.args({before:c.context?"_context":void 0})});\n`,s+=`if (!_promise${e} || !_promise${e}.then)\n`,s+=`  throw new Error('Tap function (tapPromise) did not return promise (returned ' + _promise${e} + ')');\n`,s+=`_promise${e}.then(_result${e} => {\n`,s+=`_hasResult${e} = true;\n`,n&&(s+=n(`_result${e}`)),o&&(s+=o()),s+=`}, _err${e} => {\n`,s+=`if(_hasResult${e}) throw _err${e};\n`,s+=t(`_err${e}`),s+="});\n"}return s}callTapsSeries({onError:e,onResult:t,onDone:n,rethrowIfPossible:o}){if(0===this.options.taps.length)return n();const r=this.options.taps.findIndex(e=>"sync"!==e.type),s=i=>{if(i>=this.options.taps.length)return n();const c=()=>s(i+1),a=e=>e?"":n();return this.callTap(i,{onError:t=>e(i,t,c,a),onResult:t&&(e=>t(i,e,c,a)),onDone:!t&&(()=>c()),rethrowIfPossible:o&&(r<0||i<r)})};return s(0)}callTapsLooping({onError:e,onDone:t,rethrowIfPossible:n}){if(0===this.options.taps.length)return t();const o=this.options.taps.every(e=>"sync"===e.type);let r="";o||(r+="var _looper = () => {\n",r+="var _loopAsync = false;\n"),r+="var _loop;\n",r+="do {\n",r+="_loop = false;\n";for(let e=0;e<this.options.interceptors.length;e++){const t=this.options.interceptors[e];t.loop&&(r+=`${this.getInterceptor(e)}.loop(${this.args({before:t.context?"_context":void 0})});\n`)}return r+=this.callTapsSeries({onError:e,onResult:(e,t,n,r)=>{let s="";return s+=`if(${t} !== undefined) {\n`,s+="_loop = true;\n",o||(s+="if(_loopAsync) _looper();\n"),s+=r(!0),s+="} else {\n",s+=n(),s+="}\n"},onDone:t&&(()=>{let e="";return e+="if(!_loop) {\n",e+=t(),e+="}\n"}),rethrowIfPossible:n&&o}),r+="} while(_loop);\n",o||(r+="_loopAsync = true;\n",r+="};\n",r+="_looper();\n"),r}callTapsParallel({onError:e,onResult:t,onDone:n,rethrowIfPossible:o,onTap:r=((e,t)=>t())}){if(this.options.taps.length<=1)return this.callTapsSeries({onError:e,onResult:t,onDone:n,rethrowIfPossible:o});let s="";s+="do {\n",s+=`var _counter = ${this.options.taps.length};\n`,n&&(s+="var _done = () => {\n",s+=n(),s+="};\n");for(let i=0;i<this.options.taps.length;i++){const c=()=>n?"if(--_counter === 0) _done();\n":"--_counter;",a=e=>e||!n?"_counter = 0;\n":"_counter = 0;\n_done();\n";s+="if(_counter <= 0) break;\n",s+=r(i,()=>this.callTap(i,{onError:t=>{let n="";return n+="if(_counter > 0) {\n",n+=e(i,t,c,a),n+="}\n"},onResult:t&&(e=>{let n="";return n+="if(_counter > 0) {\n",n+=t(i,e,c,a),n+="}\n"}),onDone:!t&&(()=>c()),rethrowIfPossible:o}),c,a)}return s+="} while(false);\n"}args({before:e,after:t}={}){let n=this._args;return e&&(n=[e].concat(n)),t&&(n=n.concat(t)),0===n.length?"":n.join(", ")}getTapFn(e){return`_x[${e}]`}getTap(e){return`_taps[${e}]`}getInterceptor(e){return`_interceptors[${e}]`}}},function(e,t,n){"use strict";const o=n(0),r=n(1);const s=new class extends r{content({onError:e,onResult:t,onDone:n,rethrowIfPossible:o}){return this.callTapsSeries({onError:(t,n)=>e(n),onResult:(e,n,o)=>`if(${n} !== undefined) {\n${t(n)};\n} else {\n${o()}}\n`,onDone:n,rethrowIfPossible:o})}};e.exports=class extends o{tapAsync(){throw new Error("tapAsync is not supported on a SyncBailHook")}tapPromise(){throw new Error("tapPromise is not supported on a SyncBailHook")}compile(e){return s.setup(this,e),s.create(e)}}},,,function(e,t,n){"use strict";n.r(t),n.d(t,"default",function(){return h});const{SyncHook:o,SyncBailHook:r,SyncWaterfallHook:s,SyncLoopHook:i,AsyncParallelHook:c,AsyncParallelBailHook:a,AsyncSeriesHook:l,AsyncSeriesBailHook:u,AsyncSeriesWaterfallHook:p}=n(6);function f(e,t=1e3,n=null){return new Promise((o,r)=>{setTimeout(()=>{n?r(n):o(e)},t)})}class h{constructor(){this.hooks={syncHook:new o(["num"]),syncBailHook:new r(["num"]),syncWaterfallHook:new s(["first","sec"]),asyncSeriesHook:new l(["num"]),asyncParallelHook:new c(["num"])}}call(e){this.hooks.accelerate.call(e)}promise(e){return this.hooks.calculateRoutes.promise(e).then(()=>f(e))}callAsync(e,t){this.hooks.calculateRoutes.callAsync(e,e=>{if(e)return t(e);t(null,routesList.getRoutes())})}}let y=new h;y.hooks.syncHook.tap("1A",e=>(console.log("1A",e),++e)),y.hooks.syncHook.tap("1B",e=>(console.log("1B",e),++e)),y.hooks.syncHook.tap("1C",e=>(console.log("1C",e),++e)),y.hooks.syncWaterfallHook.tap("2A",(e,t)=>(console.log("2A",e,t),[++e,++t])),y.hooks.syncWaterfallHook.tap("2B",e=>(console.log("2B",e),{a:e[0],b:e[1]})),y.hooks.syncWaterfallHook.tap("2C",e=>(console.log("2C",e),e)),y.hooks.syncBailHook.tap("3A",e=>{console.log("3A",e)}),y.hooks.syncBailHook.tap("3B",e=>(console.log("3B",e),e)),y.hooks.syncBailHook.tap("3C",e=>{console.log("3C",e)}),y.hooks.asyncSeriesHook.tapAsync("before 4A ",(e,t)=>{console.log("before 4A",e),f(++e,2e3).then(e=>{console.log("before 4A in",e),t()})}),y.hooks.asyncSeriesHook.tapPromise("4A",e=>(console.log("4A",e),f(++e,2e3))),y.hooks.asyncSeriesHook.tap("4B",e=>{console.log("4B",e),f(++e,3e3).then(e=>{console.log("4B in",e)})}),y.hooks.asyncSeriesHook.tapPromise("4C",e=>(console.log("4C",e),f(++e,2e3).then(e=>{console.log("4C in",e)}))),y.hooks.asyncParallelHook.tapAsync("5A",(e,t)=>{console.log("5A",e),f(++e,2e3).then(e=>{console.log("5A in",e),t()})}),y.hooks.asyncParallelHook.tapPromise("5B",e=>(console.log("5B",e),f(++e,3e3).then(e=>{console.log("5B in",e)}))),y.hooks.asyncParallelHook.tapPromise("5C",e=>(console.log("5C",e),f(++e,2e3).then(e=>{console.log("5C in",e)}))),document.body.appendChild(function(){var e=document.createElement("div");return e.style="border:1px solid black",e.id="root",[["emit SyncHook",function(){y.hooks.syncHook.call(1)}],["emit SyncWaterfallHook",function(){y.hooks.syncWaterfallHook.call(1,100)}],["emit SyncBailHook",function(){y.hooks.syncBailHook.call(1)}],["emit AsyncSeriesHook",function(){y.hooks.asyncSeriesHook.promise(1).then(e=>{console.log("asyncSeriesHook end")})}],["emit AsyncParallelHook",function(){y.hooks.asyncParallelHook.callAsync(1,e=>{console.log("asyncParallelHook end",e)})}],["emit All",function(){y.hooks.syncHook.call(1),y.hooks.syncWaterfallHook.call(1,100),y.hooks.syncBailHook.call(1),y.hooks.asyncSeriesHook.promise(1),y.hooks.asyncParallelHook.callAsync(1,()=>{console.log("asyncParallelHook ends")})}]].forEach(([t,n])=>{var o=document.createElement("button");o.innerHTML=t,o.onclick=n,e.appendChild(o)}),e}())},function(e,t,n){"use strict";t.__esModule=!0,t.Tapable=n(7),t.SyncHook=n(13),t.SyncBailHook=n(2),t.SyncWaterfallHook=n(14),t.SyncLoopHook=n(15),t.AsyncParallelHook=n(16),t.AsyncParallelBailHook=n(17),t.AsyncSeriesHook=n(18),t.AsyncSeriesBailHook=n(19),t.AsyncSeriesWaterfallHook=n(20),t.HookMap=n(21),t.MultiHook=n(22)},function(e,t,n){"use strict";const o=n(8),r=n(2);function s(){this._pluginCompat=new r(["options"]),this._pluginCompat.tap({name:"Tapable camelCase",stage:100},e=>{e.names.add(e.name.replace(/[- ]([a-z])/g,(e,t)=>t.toUpperCase()))}),this._pluginCompat.tap({name:"Tapable this.hooks",stage:200},e=>{let t;for(const n of e.names)if(void 0!==(t=this.hooks[n]))break;if(void 0!==t){const n={name:e.fn.name||"unnamed compat plugin",stage:e.stage||0};return e.async?t.tapAsync(n,e.fn):t.tap(n,e.fn),!0}})}e.exports=s,s.addCompatLayer=function(e){s.call(e),e.plugin=s.prototype.plugin,e.apply=s.prototype.apply},s.prototype.plugin=o.deprecate(function(e,t){if(Array.isArray(e))return void e.forEach(function(e){this.plugin(e,t)},this);if(!this._pluginCompat.call({name:e,fn:t,names:new Set([e])}))throw new Error(`Plugin could not be registered at '${e}'. Hook was not found.\n`+"BREAKING CHANGE: There need to exist a hook at 'this.hooks'. To create a compatibility layer for this hook, hook into 'this._pluginCompat'.")},"Tapable.plugin is deprecated. Use new API on `.hooks` instead"),s.prototype.apply=o.deprecate(function(){for(var e=0;e<arguments.length;e++)arguments[e].apply(this)},"Tapable.apply is deprecated. Call apply on the plugin directly instead")},function(e,t,n){(function(e,o){var r=/%[sdj%]/g;t.format=function(e){if(!m(e)){for(var t=[],n=0;n<arguments.length;n++)t.push(c(arguments[n]));return t.join(" ")}n=1;for(var o=arguments,s=o.length,i=String(e).replace(r,function(e){if("%%"===e)return"%";if(n>=s)return e;switch(e){case"%s":return String(o[n++]);case"%d":return Number(o[n++]);case"%j":try{return JSON.stringify(o[n++])}catch(e){return"[Circular]"}default:return e}}),a=o[n];n<s;a=o[++n])g(a)||!w(a)?i+=" "+a:i+=" "+c(a);return i},t.deprecate=function(n,r){if(_(e.process))return function(){return t.deprecate(n,r).apply(this,arguments)};if(!0===o.noDeprecation)return n;var s=!1;return function(){if(!s){if(o.throwDeprecation)throw new Error(r);o.traceDeprecation?console.trace(r):console.error(r),s=!0}return n.apply(this,arguments)}};var s,i={};function c(e,n){var o={seen:[],stylize:l};return arguments.length>=3&&(o.depth=arguments[2]),arguments.length>=4&&(o.colors=arguments[3]),y(n)?o.showHidden=n:n&&t._extend(o,n),_(o.showHidden)&&(o.showHidden=!1),_(o.depth)&&(o.depth=2),_(o.colors)&&(o.colors=!1),_(o.customInspect)&&(o.customInspect=!0),o.colors&&(o.stylize=a),u(o,e,o.depth)}function a(e,t){var n=c.styles[t];return n?"["+c.colors[n][0]+"m"+e+"["+c.colors[n][1]+"m":e}function l(e,t){return e}function u(e,n,o){if(e.customInspect&&n&&x(n.inspect)&&n.inspect!==t.inspect&&(!n.constructor||n.constructor.prototype!==n)){var r=n.inspect(o,e);return m(r)||(r=u(e,r,o)),r}var s=function(e,t){if(_(t))return e.stylize("undefined","undefined");if(m(t)){var n="'"+JSON.stringify(t).replace(/^"|"$/g,"").replace(/'/g,"\\'").replace(/\\"/g,'"')+"'";return e.stylize(n,"string")}if(d(t))return e.stylize(""+t,"number");if(y(t))return e.stylize(""+t,"boolean");if(g(t))return e.stylize("null","null")}(e,n);if(s)return s;var i=Object.keys(n),c=function(e){var t={};return e.forEach(function(e,n){t[e]=!0}),t}(i);if(e.showHidden&&(i=Object.getOwnPropertyNames(n)),v(n)&&(i.indexOf("message")>=0||i.indexOf("description")>=0))return p(n);if(0===i.length){if(x(n)){var a=n.name?": "+n.name:"";return e.stylize("[Function"+a+"]","special")}if(b(n))return e.stylize(RegExp.prototype.toString.call(n),"regexp");if(k(n))return e.stylize(Date.prototype.toString.call(n),"date");if(v(n))return p(n)}var l,w="",$=!1,A=["{","}"];(h(n)&&($=!0,A=["[","]"]),x(n))&&(w=" [Function"+(n.name?": "+n.name:"")+"]");return b(n)&&(w=" "+RegExp.prototype.toString.call(n)),k(n)&&(w=" "+Date.prototype.toUTCString.call(n)),v(n)&&(w=" "+p(n)),0!==i.length||$&&0!=n.length?o<0?b(n)?e.stylize(RegExp.prototype.toString.call(n),"regexp"):e.stylize("[Object]","special"):(e.seen.push(n),l=$?function(e,t,n,o,r){for(var s=[],i=0,c=t.length;i<c;++i)H(t,String(i))?s.push(f(e,t,n,o,String(i),!0)):s.push("");return r.forEach(function(r){r.match(/^\d+$/)||s.push(f(e,t,n,o,r,!0))}),s}(e,n,o,c,i):i.map(function(t){return f(e,n,o,c,t,$)}),e.seen.pop(),function(e,t,n){if(e.reduce(function(e,t){return 0,t.indexOf("\n")>=0&&0,e+t.replace(/\u001b\[\d\d?m/g,"").length+1},0)>60)return n[0]+(""===t?"":t+"\n ")+" "+e.join(",\n  ")+" "+n[1];return n[0]+t+" "+e.join(", ")+" "+n[1]}(l,w,A)):A[0]+w+A[1]}function p(e){return"["+Error.prototype.toString.call(e)+"]"}function f(e,t,n,o,r,s){var i,c,a;if((a=Object.getOwnPropertyDescriptor(t,r)||{value:t[r]}).get?c=a.set?e.stylize("[Getter/Setter]","special"):e.stylize("[Getter]","special"):a.set&&(c=e.stylize("[Setter]","special")),H(o,r)||(i="["+r+"]"),c||(e.seen.indexOf(a.value)<0?(c=g(n)?u(e,a.value,null):u(e,a.value,n-1)).indexOf("\n")>-1&&(c=s?c.split("\n").map(function(e){return"  "+e}).join("\n").substr(2):"\n"+c.split("\n").map(function(e){return"   "+e}).join("\n")):c=e.stylize("[Circular]","special")),_(i)){if(s&&r.match(/^\d+$/))return c;(i=JSON.stringify(""+r)).match(/^"([a-zA-Z_][a-zA-Z_0-9]*)"$/)?(i=i.substr(1,i.length-2),i=e.stylize(i,"name")):(i=i.replace(/'/g,"\\'").replace(/\\"/g,'"').replace(/(^"|"$)/g,"'"),i=e.stylize(i,"string"))}return i+": "+c}function h(e){return Array.isArray(e)}function y(e){return"boolean"==typeof e}function g(e){return null===e}function d(e){return"number"==typeof e}function m(e){return"string"==typeof e}function _(e){return void 0===e}function b(e){return w(e)&&"[object RegExp]"===$(e)}function w(e){return"object"==typeof e&&null!==e}function k(e){return w(e)&&"[object Date]"===$(e)}function v(e){return w(e)&&("[object Error]"===$(e)||e instanceof Error)}function x(e){return"function"==typeof e}function $(e){return Object.prototype.toString.call(e)}function A(e){return e<10?"0"+e.toString(10):e.toString(10)}t.debuglog=function(e){if(_(s)&&(s=o.env.NODE_DEBUG||""),e=e.toUpperCase(),!i[e])if(new RegExp("\\b"+e+"\\b","i").test(s)){var n=o.pid;i[e]=function(){var o=t.format.apply(t,arguments);console.error("%s %d: %s",e,n,o)}}else i[e]=function(){};return i[e]},t.inspect=c,c.colors={bold:[1,22],italic:[3,23],underline:[4,24],inverse:[7,27],white:[37,39],grey:[90,39],black:[30,39],blue:[34,39],cyan:[36,39],green:[32,39],magenta:[35,39],red:[31,39],yellow:[33,39]},c.styles={special:"cyan",number:"yellow",boolean:"yellow",undefined:"grey",null:"bold",string:"green",date:"magenta",regexp:"red"},t.isArray=h,t.isBoolean=y,t.isNull=g,t.isNullOrUndefined=function(e){return null==e},t.isNumber=d,t.isString=m,t.isSymbol=function(e){return"symbol"==typeof e},t.isUndefined=_,t.isRegExp=b,t.isObject=w,t.isDate=k,t.isError=v,t.isFunction=x,t.isPrimitive=function(e){return null===e||"boolean"==typeof e||"number"==typeof e||"string"==typeof e||"symbol"==typeof e||void 0===e},t.isBuffer=n(11);var E=["Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec"];function H(e,t){return Object.prototype.hasOwnProperty.call(e,t)}t.log=function(){console.log("%s - %s",function(){var e=new Date,t=[A(e.getHours()),A(e.getMinutes()),A(e.getSeconds())].join(":");return[e.getDate(),E[e.getMonth()],t].join(" ")}(),t.format.apply(t,arguments))},t.inherits=n(12),t._extend=function(e,t){if(!t||!w(t))return e;for(var n=Object.keys(t),o=n.length;o--;)e[n[o]]=t[n[o]];return e}}).call(this,n(9),n(10))},function(e,t){var n;n=function(){return this}();try{n=n||Function("return this")()||(0,eval)("this")}catch(e){"object"==typeof window&&(n=window)}e.exports=n},function(e,t){var n,o,r=e.exports={};function s(){throw new Error("setTimeout has not been defined")}function i(){throw new Error("clearTimeout has not been defined")}function c(e){if(n===setTimeout)return setTimeout(e,0);if((n===s||!n)&&setTimeout)return n=setTimeout,setTimeout(e,0);try{return n(e,0)}catch(t){try{return n.call(null,e,0)}catch(t){return n.call(this,e,0)}}}!function(){try{n="function"==typeof setTimeout?setTimeout:s}catch(e){n=s}try{o="function"==typeof clearTimeout?clearTimeout:i}catch(e){o=i}}();var a,l=[],u=!1,p=-1;function f(){u&&a&&(u=!1,a.length?l=a.concat(l):p=-1,l.length&&h())}function h(){if(!u){var e=c(f);u=!0;for(var t=l.length;t;){for(a=l,l=[];++p<t;)a&&a[p].run();p=-1,t=l.length}a=null,u=!1,function(e){if(o===clearTimeout)return clearTimeout(e);if((o===i||!o)&&clearTimeout)return o=clearTimeout,clearTimeout(e);try{o(e)}catch(t){try{return o.call(null,e)}catch(t){return o.call(this,e)}}}(e)}}function y(e,t){this.fun=e,this.array=t}function g(){}r.nextTick=function(e){var t=new Array(arguments.length-1);if(arguments.length>1)for(var n=1;n<arguments.length;n++)t[n-1]=arguments[n];l.push(new y(e,t)),1!==l.length||u||c(h)},y.prototype.run=function(){this.fun.apply(null,this.array)},r.title="browser",r.browser=!0,r.env={},r.argv=[],r.version="",r.versions={},r.on=g,r.addListener=g,r.once=g,r.off=g,r.removeListener=g,r.removeAllListeners=g,r.emit=g,r.prependListener=g,r.prependOnceListener=g,r.listeners=function(e){return[]},r.binding=function(e){throw new Error("process.binding is not supported")},r.cwd=function(){return"/"},r.chdir=function(e){throw new Error("process.chdir is not supported")},r.umask=function(){return 0}},function(e,t){e.exports=function(e){return e&&"object"==typeof e&&"function"==typeof e.copy&&"function"==typeof e.fill&&"function"==typeof e.readUInt8}},function(e,t){"function"==typeof Object.create?e.exports=function(e,t){e.super_=t,e.prototype=Object.create(t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}})}:e.exports=function(e,t){e.super_=t;var n=function(){};n.prototype=t.prototype,e.prototype=new n,e.prototype.constructor=e}},function(e,t,n){"use strict";const o=n(0),r=n(1);const s=new class extends r{content({onError:e,onResult:t,onDone:n,rethrowIfPossible:o}){return this.callTapsSeries({onError:(t,n)=>e(n),onDone:n,rethrowIfPossible:o})}};e.exports=class extends o{tapAsync(){throw new Error("tapAsync is not supported on a SyncHook")}tapPromise(){throw new Error("tapPromise is not supported on a SyncHook")}compile(e){return s.setup(this,e),s.create(e)}}},function(e,t,n){"use strict";const o=n(0),r=n(1);const s=new class extends r{content({onError:e,onResult:t,onDone:n,rethrowIfPossible:o}){return this.callTapsSeries({onError:(t,n)=>e(n),onResult:(e,t,n)=>{let o="";return o+=`if(${t} !== undefined) {\n`,o+=`${this._args[0]} = ${t};\n`,o+="}\n",o+=n()},onDone:()=>t(this._args[0]),rethrowIfPossible:o})}};e.exports=class extends o{constructor(e){if(super(e),e.length<1)throw new Error("Waterfall hooks must have at least one argument")}tapAsync(){throw new Error("tapAsync is not supported on a SyncWaterfallHook")}tapPromise(){throw new Error("tapPromise is not supported on a SyncWaterfallHook")}compile(e){return s.setup(this,e),s.create(e)}}},function(e,t,n){"use strict";const o=n(0),r=n(1);const s=new class extends r{content({onError:e,onResult:t,onDone:n,rethrowIfPossible:o}){return this.callTapsLooping({onError:(t,n)=>e(n),onDone:n,rethrowIfPossible:o})}};e.exports=class extends o{tapAsync(){throw new Error("tapAsync is not supported on a SyncLoopHook")}tapPromise(){throw new Error("tapPromise is not supported on a SyncLoopHook")}compile(e){return s.setup(this,e),s.create(e)}}},function(e,t,n){"use strict";const o=n(0),r=n(1);const s=new class extends r{content({onError:e,onDone:t}){return this.callTapsParallel({onError:(t,n,o,r)=>e(n)+r(!0),onDone:t})}};class i extends o{compile(e){return s.setup(this,e),s.create(e)}}Object.defineProperties(i.prototype,{_call:{value:void 0,configurable:!0,writable:!0}}),e.exports=i},function(e,t,n){"use strict";const o=n(0),r=n(1);const s=new class extends r{content({onError:e,onResult:t,onDone:n}){let o="";return o+=`var _results = new Array(${this.options.taps.length});\n`,o+="var _checkDone = () => {\n",o+="for(var i = 0; i < _results.length; i++) {\n",o+="var item = _results[i];\n",o+="if(item === undefined) return false;\n",o+="if(item.result !== undefined) {\n",o+=t("item.result"),o+="return true;\n",o+="}\n",o+="if(item.error) {\n",o+=e("item.error"),o+="return true;\n",o+="}\n",o+="}\n",o+="return false;\n",o+="}\n",o+=this.callTapsParallel({onError:(e,t,n,o)=>{let r="";return r+=`if(${e} < _results.length && ((_results.length = ${e+1}), (_results[${e}] = { error: ${t} }), _checkDone())) {\n`,r+=o(!0),r+="} else {\n",r+=n(),r+="}\n"},onResult:(e,t,n,o)=>{let r="";return r+=`if(${e} < _results.length && (${t} !== undefined && (_results.length = ${e+1}), (_results[${e}] = { result: ${t} }), _checkDone())) {\n`,r+=o(!0),r+="} else {\n",r+=n(),r+="}\n"},onTap:(e,t,n,o)=>{let r="";return e>0&&(r+=`if(${e} >= _results.length) {\n`,r+=n(),r+="} else {\n"),r+=t(),e>0&&(r+="}\n"),r},onDone:n})}};class i extends o{compile(e){return s.setup(this,e),s.create(e)}}Object.defineProperties(i.prototype,{_call:{value:void 0,configurable:!0,writable:!0}}),e.exports=i},function(e,t,n){"use strict";const o=n(0),r=n(1);const s=new class extends r{content({onError:e,onDone:t}){return this.callTapsSeries({onError:(t,n,o,r)=>e(n)+r(!0),onDone:t})}};class i extends o{compile(e){return s.setup(this,e),s.create(e)}}Object.defineProperties(i.prototype,{_call:{value:void 0,configurable:!0,writable:!0}}),e.exports=i},function(e,t,n){"use strict";const o=n(0),r=n(1);const s=new class extends r{content({onError:e,onResult:t,onDone:n}){return this.callTapsSeries({onError:(t,n,o,r)=>e(n)+r(!0),onResult:(e,n,o)=>`if(${n} !== undefined) {\n${t(n)};\n} else {\n${o()}}\n`,onDone:n})}};class i extends o{compile(e){return s.setup(this,e),s.create(e)}}Object.defineProperties(i.prototype,{_call:{value:void 0,configurable:!0,writable:!0}}),e.exports=i},function(e,t,n){"use strict";const o=n(0),r=n(1);const s=new class extends r{content({onError:e,onResult:t,onDone:n}){return this.callTapsSeries({onError:(t,n,o,r)=>e(n)+r(!0),onResult:(e,t,n)=>{let o="";return o+=`if(${t} !== undefined) {\n`,o+=`${this._args[0]} = ${t};\n`,o+="}\n",o+=n()},onDone:()=>t(this._args[0])})}};class i extends o{constructor(e){if(super(e),e.length<1)throw new Error("Waterfall hooks must have at least one argument")}compile(e){return s.setup(this,e),s.create(e)}}Object.defineProperties(i.prototype,{_call:{value:void 0,configurable:!0,writable:!0}}),e.exports=i},function(e,t,n){"use strict";e.exports=class{constructor(e){this._map=new Map,this._factory=e,this._interceptors=[]}get(e){return this._map.get(e)}for(e){const t=this.get(e);if(void 0!==t)return t;let n=this._factory(e);const o=this._interceptors;for(let t=0;t<o.length;t++)n=o[t].factory(e,n);return this._map.set(e,n),n}intercept(e){this._interceptors.push(Object.assign({factory:(e,t)=>t},e))}tap(e,t,n){return this.for(e).tap(t,n)}tapAsync(e,t,n){return this.for(e).tapAsync(t,n)}tapPromise(e,t,n){return this.for(e).tapPromise(t,n)}}},function(e,t,n){"use strict";n(0);class o{constructor(e){this.hooks=e}tap(e,t){for(const n of this.hooks)n.tap(e,t)}tapAsync(e,t){for(const n of this.hooks)n.tapAsync(e,t)}tapPromise(e,t){for(const n of this.hooks)n.tapPromise(e,t)}isUsed(){for(const e of this.hooks)if(e.isUsed())return!0;return!1}intercept(e){for(const t of this.hooks)t.intercept(e)}withOptions(e){return new o(this.hooks.map(t=>t.withOptions(e)))}}e.exports=o}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,